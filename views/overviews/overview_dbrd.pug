extends ../layout

append head
  link(rel='stylesheet' href='/css/leaflet.css')

block content
  main(role='main')
    .container
      .row
        .col-12.p-3
          .card.bg-dark
            .card-body.text-muted.text-center
              h3 Dashboard - Einsatzübersicht
        .col-12
          div.border-top.m-3
      .row 
        if dataSet && dataSet.length > 0
          each val, index in dataSet
            .col-12.col-md-6.d-flex.align-self-stretch.p-3
              .card.w-100
                .card-header
                  case val.einsatzart
                    when 'Brandeinsatz'
                      h5.font-weight-bold.text-danger.ion-md-flame= ' ' + val.einsatzart + ' - ' + val.stichwort
                    when 'Hilfeleistungseinsatz'
                      h5.font-weight-bold.text-info.ion-md-construct= ' ' + val.einsatzart + ' - ' + val.stichwort
                    when 'Rettungseinsatz'
                      h5.font-weight-bold.text-warning.ion-md-medkit= ' ' + val.einsatzart + ' - ' + val.stichwort
                    when 'Krankentransport'
                      h5.font-weight-bold.text-success.ion-md-medical= ' ' + val.einsatzart + ' - ' + val.stichwort                    
                    default
                      h5.font-weight-bold.ion-md-information-circle= ' ' + val.einsatzart + ' - ' + val.stichwort
                .card-body                
                  if val.ortsteil
                    p= val.ort + ', ' + val.ortsteil
                  else
                    p= val.ort
                  .w-100.rounded( id='map' + val.uuid style='height:150px')
                .card-footer.text-right
                  a.btn.btn-primary.mx-2.ion-md-arrow-round-forward(href='/dbrd/' + val.uuid, role='button')  Dashboard aufrufen
        else
          .col-12
            .alert.alert-info Derzeit sind keine aktiven Einsätze vorhanden.

  script(src='/js/leaflet.js')
  script.  

    let data = !{JSON.stringify(dataSet).replace(/<\//g, '<\\/')}
    for (let i in data) {
      // Karte definieren
      let map = L.map('map'+data[i].uuid, {
        zoomControl: false,
        attributionControl: false
      });

      map_service=!{JSON.stringify(map_service)};

      let maxMapZoom = 18; // Standard-Zoomstufe

      // Layer der Karte basierend auf dem Typ des Kartendienstes hinzufuegen
      if (map_service.type === "tile") {
        // Tile-Map hinzufuegen
        L.tileLayer(map_service.tile_url, {
          maxZoom: maxMapZoom,
        }).addTo(map);
      } else if (map_service.type === "wms") {
        // WMS-Map hinzufuegen
        var wmsLayer = L.tileLayer.wms(map_service.wms_url, {
          layers: map_service.wms_layers,
          format: map_service.wms_format,
          transparent: map_service.wms_transparent,
          version: map_service.wms_version,
        });

        // Fehlerbehandlung: Wenn der WMS-Layer nicht geladen werden kann, dann versuche den Tile-Layer
        wmsLayer.on("tileerror", function () {
          console.warn("WMS-Layer konnte nicht geladen werden, versuche Tile-Layer:", map_service.tile_url);
          // Tile-Map hinufuegen
          L.tileLayer(map_service.tile_url, {
            maxZoom: maxMapZoom,
          }).addTo(map);
        });

        wmsLayer.addTo(map);
      }

    // Karte setzen

    let geojson = L.geoJSON(JSON.parse(data[i].geometry)).addTo(map);
    map.fitBounds(geojson.getBounds());
    map.setZoom(13);
    map.dragging.disable();
    map.touchZoom.disable();
    map.doubleClickZoom.disable();
    map.scrollWheelZoom.disable();
    map.boxZoom.disable();
    map.keyboard.disable();
    map.scrollWheelZoom.disable();

    };    
